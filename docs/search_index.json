[["index.html", "AlberdiLab | Manuscript in prep Plecotus auritus metagenomics Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Manuscript in prep Plecotus auritus metagenomics Orly Razgour, Antton Alberdi[University of Copenhagen, raphael.eisenhofer@sund.ku.dk] 2024-11-18 Chapter 1 Introduction 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/adaptation_hologenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) #library(lmerTest) library(Hmsc) library(corrplot) library(lme4) library(nlme) library(ANCOMBC) "],["prepare-data.html", "Chapter 2 Prepare data 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Prepare data 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0029_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.1.2 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0029_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample))) 2.1.3 Genome taxonomy genome_metadata &lt;- read_tsv(&quot;data/DMB0029_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size)%&gt;% semi_join(., read_counts, by = &quot;genome&quot;) %&gt;% arrange(match(genome,read_counts$genome)) 2.1.4 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0029_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(one_of(c(&quot;genome&quot;,sample_metadata$sample)))%&gt;% semi_join(., genome_metadata, by = &quot;genome&quot;)%&gt;% arrange(match(genome, read_counts$genome)) 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0029.tree.gz&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% read_tsv() %&gt;% #load all tables rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/genome_annotations.tsv.xz&quot;) #write to overall compressed file genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts_raw &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, #genome_gifts_raw, # genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data.Rdata&quot;) 3.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() .table td.tinytable_css_id1dng2xgogt2jwsjqwryc, .table th.tinytable_css_id1dng2xgogt2jwsjqwryc { border-bottom: solid 0.1em #d3d8dc; } Total Average 1107.09 7.69 ± 12.08 3.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() .table td.tinytable_css_idjcm8u1emcza6n15a5tv6, .table th.tinytable_css_idjcm8u1emcza6n15a5tv6 { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI00183 0.24048444 0.657867674 3.20972671 0.486180876 EHI00184 0.43959001 2.535444891 0.00000000 0.038007596 EHI00185 0.48841577 0.698189337 1.14509886 0.212797628 EHI00186 1.55299362 1.602406648 0.75634276 0.429671576 EHI00187 0.69156279 3.698760649 1.33951683 0.099372126 EHI00188 17.32099369 29.743751512 62.46381972 15.613817576 EHI00189 0.48155580 0.274949231 0.58158734 0.266308526 EHI00192 0.23727630 0.003737928 0.69194418 0.002385494 EHI00201 0.28582226 3.951437500 2.77627431 1.281099338 EHI00283 1.21931896 5.809306852 4.32068231 6.250791878 EHI00291 0.13369365 2.262443885 0.25045799 0.894090568 EHI00298 0.25098220 0.442733590 1.61579205 4.606894366 EHI00313 0.44346970 5.478786198 0.00000000 0.011688906 EHI00344 0.02112383 0.431801171 0.00000000 0.054654224 EHI00345 0.30214864 4.235676300 1.70464150 3.986560660 EHI00348 0.07041971 0.153505886 1.02656683 0.055424374 EHI00352 0.02490425 0.222418453 0.00000000 0.066575270 EHI00356 0.01818980 0.343329405 0.00000000 0.006348664 EHI00357 0.02155217 0.216957127 0.00000000 0.025013596 EHI00358 0.01308903 0.368913871 0.00000000 0.145278322 EHI00366 0.29490048 1.086948047 0.76583328 1.114883886 EHI00372 0.23363423 4.199310667 0.00000000 0.007194296 EHI00397 0.16823933 0.037077679 0.06306659 3.547268706 EHI00424 0.41419973 4.170092774 0.00000000 0.000046720 EHI00425 0.39658902 3.522365576 0.00000000 0.000072854 EHI00429 0.46068711 3.419465794 0.00000000 0.000041902 EHI00430 0.66460396 3.922098444 0.00000000 0.000054312 EHI00431 0.46169473 0.883563696 2.92105086 0.105174312 EHI00432 0.54428607 4.864578333 0.00000000 0.000461798 EHI00434 0.41658131 3.731622194 0.00000000 0.000031974 EHI00439 0.80346100 5.675914701 0.00000000 0.000022338 EHI00442 0.28396498 4.193297419 0.00000000 0.020710830 EHI00443 0.56554120 6.470641397 0.00000000 0.036133686 EHI00445 0.54020296 4.483875444 0.00000000 0.000010366 EHI00447 0.76118407 6.354413032 0.00000000 0.000057962 EHI00448 1.00044669 7.712245714 0.00000000 0.000033142 EHI00450 0.66482966 5.506392341 0.00000000 0.000022484 EHI00469 0.53491502 4.392977679 0.00000000 0.000053144 EHI00474 0.21732550 0.014607431 0.14047905 3.033514124 EHI00482 0.63897427 5.469856434 0.00000000 0.000012994 EHI00485 0.55011480 0.079219620 5.17482284 1.508382940 EHI00500 0.28448087 3.917233332 0.00000000 0.074315168 EHI00502 0.29169254 0.206802421 0.33161628 3.485806064 EHI00503 0.29115932 4.861179882 0.00000000 0.043581000 EHI00511 0.39117359 0.474346683 1.47530319 2.866435228 EHI00515 0.27691392 3.467436785 0.00000000 0.003190100 EHI00523 1.29573370 2.715429548 2.28146617 0.399547980 EHI00531 0.39832321 0.487608387 4.65126402 0.551110288 EHI00540 0.53418711 2.321891643 1.28768908 2.191302466 EHI00542 0.54438736 4.640309235 0.00000000 0.158184576 EHI00555 0.25665590 3.828772904 0.00000000 0.001915520 EHI00570 1.11547649 0.331372750 2.43458520 1.448447166 EHI00571 0.66458379 3.966333942 0.58328598 0.583339788 EHI00572 0.85861329 8.603908712 0.00000000 0.000094024 EHI00575 1.01714051 8.929921088 0.00000000 0.000040442 EHI00576 1.43993177 10.192751831 0.00000000 0.000140452 EHI00577 0.41833088 0.316473625 2.27452481 1.304388090 EHI00578 0.96057297 11.327898031 0.00000000 0.000770442 EHI00579 0.82331699 4.683870605 0.00000000 0.017571538 EHI00580 0.44535195 0.665686316 3.02460181 1.550546134 EHI00581 0.39594506 1.423695821 3.13637658 0.299555938 EHI00582 0.65401757 8.667609430 0.00000000 0.000096506 EHI00583 1.68760582 12.210812479 0.00000000 0.000101470 EHI00585 0.99204185 12.025216152 0.00000000 0.001028132 EHI00586 1.40081913 11.554667372 0.00000000 0.000143226 EHI00587 1.10113368 1.408632021 0.89656860 7.696488696 EHI00588 0.89269801 6.402080391 0.00000000 0.000056064 EHI00590 1.42676147 9.734610431 0.00000000 0.000037084 EHI00591 1.16593471 9.297895186 0.00000000 0.001213260 EHI00593 1.20338161 5.817787186 0.00000000 0.000031536 EHI00594 4.05894671 1.615414436 2.00153830 8.480303858 EHI00595 0.89737715 8.384414949 0.00000000 0.000111106 EHI00596 0.47428819 3.225220403 1.91075579 0.188392122 EHI00597 0.56748913 3.163207469 1.69177274 0.143908258 EHI00598 0.86043455 10.683224652 0.00000000 0.000610718 EHI00599 0.54442491 0.963491007 4.24035172 0.782154266 EHI00601 1.08898004 9.083096556 0.00000000 0.000096068 EHI00603 0.93131916 8.847281344 0.00000000 0.000105266 EHI00604 1.31171273 11.010130872 0.00000000 0.000127896 EHI00605 0.88908394 10.990777156 0.00000000 0.000151694 EHI00607 0.58136582 2.286987494 3.46631998 0.750306702 EHI00608 1.24047566 6.433538634 0.36555289 2.291290420 EHI00609 1.00479049 9.945764812 0.00000000 0.000114902 EHI00610 1.91365634 8.955057457 0.00000000 0.000026134 EHI00611 1.19627947 8.430918526 0.00000000 0.000109500 EHI00613 0.89087178 7.877529421 0.00000000 0.000101762 EHI00615 0.43417087 0.196449394 3.65658620 1.348642734 EHI00617 2.73499278 9.099635221 0.00000000 0.000663862 EHI00619 2.23484434 9.839743163 0.00000000 0.000248054 EHI00620 1.38849902 9.752177979 0.00000000 0.000119428 EHI00621 0.98782460 8.144633496 0.00000000 0.000101470 EHI00622 0.97739046 1.596297201 0.86164745 1.890293390 EHI00624 0.47394102 3.391726314 1.47550804 0.613976428 EHI00625 0.45117553 0.380971311 0.62013751 5.106459354 EHI00626 1.05746409 9.440282312 0.00000000 0.000095046 EHI00628 1.22543446 11.514007942 0.00000000 0.000199728 EHI00629 0.88026531 9.572167590 0.00000000 0.000566188 EHI00630 0.52501365 6.611139746 0.00000000 0.226466878 EHI00632 0.86982300 9.451018500 0.00000000 0.000094608 EHI00633 0.49786664 3.518518937 2.66066292 0.417242596 EHI00634 0.58636521 2.044740786 1.80168910 3.029560006 EHI00635 1.22135698 9.398268917 0.00000000 0.000094608 EHI00636 0.73335960 8.885300703 0.00000000 0.000114756 EHI00637 0.35813313 2.239229860 4.19103621 0.126213204 EHI00639 0.32863040 0.909162728 2.06715814 0.862364330 EHI00641 0.90690586 8.806483642 0.00000000 0.000215058 EHI00642 0.85603042 1.241043987 2.00941105 0.727362948 EHI00643 0.72929661 3.208305343 1.35258987 0.274951580 EHI00645 1.21240637 9.350586730 0.00000000 0.000126728 EHI00646 0.50481747 0.723554760 2.35742781 3.129261654 EHI00648 0.59402460 2.825386366 2.34264103 3.629585404 EHI00651 0.33836573 1.532843651 1.17260080 0.821232626 EHI00652 2.66364594 0.736605898 2.18801490 0.238647658 EHI00653 1.22224901 0.328424848 4.36469128 2.034190260 EHI00654 0.43775318 4.301997558 2.53858156 0.825790600 EHI00655 0.29001084 0.286004587 0.63068722 3.659207052 EHI00656 0.34407814 1.372983042 0.57951474 2.927696974 EHI00657 1.00873609 10.002903106 0.00000000 0.000090082 EHI00660 0.64012110 2.583799787 2.25496008 0.055216032 EHI00662 10.13119934 87.251423260 0.00000000 0.000268786 EHI00804 0.38831017 1.525552927 3.50204780 0.486835102 EHI00868 0.51714305 1.993833357 0.95355083 0.988430658 EHI00869 0.33232601 3.434905394 0.00000000 0.000058838 EHI00878 0.18482571 2.569484428 0.15619133 0.582020532 EHI00881 0.18174551 1.972887788 0.00000000 0.001965598 EHI00885 0.25023388 0.199309302 0.72290721 2.684446812 EHI00894 0.31987836 0.802322705 1.47383724 2.001890388 EHI00899 0.36269734 1.957367889 1.86648104 0.598891124 EHI00908 0.32237440 3.422398398 0.00000000 0.000068036 EHI00913 0.44483366 0.225524552 2.43629210 0.772790994 EHI00923 0.33145793 0.668144005 3.76913039 0.155614976 EHI00930 0.47331656 1.278181484 1.87954072 2.532543740 EHI00934 0.20554556 4.408118442 0.00000000 0.187824620 EHI00935 0.42137355 5.490118947 0.00000000 0.026228462 EHI00937 0.31680500 4.404357398 0.00000000 0.000072562 EHI00943 0.23814123 3.754400366 0.00000000 0.046793584 EHI00944 0.35394754 4.234475664 0.00000000 0.015553818 EHI00982 0.12639718 2.593576222 0.00000000 0.030909076 EHI00985 0.68293573 6.471160967 0.00000000 0.000108624 EHI01007 0.64409508 0.010218762 2.63556397 1.394787786 EHI01021 0.28997720 5.220964600 0.00000000 0.082470874 EHI01025 0.62010090 6.590790000 0.00000000 0.000103952 EHI01027 0.31966389 3.909320910 0.00000000 0.082259028 EHI01030 0.29925549 5.249167114 0.00000000 0.198890982 sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% summarise(across(where(is.numeric), mean, na.rm = TRUE)) %&gt;% tt() Warning: There was 1 warning in `summarise()`. ℹ In argument: `across(where(is.numeric), mean, na.rm = TRUE)`. Caused by warning: ! The `...` argument of `across()` is deprecated as of dplyr 1.1.0. Supply arguments directly to `.fns` through an anonymous function instead. # Previously across(a:b, mean, na.rm = TRUE) # Now across(a:b, \\(x) mean(x, na.rm = TRUE)) .table td.tinytable_css_idgskdx3t4n6r4x7e2xk5k, .table th.tinytable_css_idgskdx3t4n6r4x7e2xk5k { border-bottom: solid 0.1em #d3d8dc; } Low quality Mapped to host Unmapped Mapped to MAGs 0.8682458 5.087678 1.28835 0.8614129 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) 3.3 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;right&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
